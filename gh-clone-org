#!/bin/bash

function _require() {
    if [[ -z $(command -v "$1" 2>/dev/null) ]]; then
        echo "Install $1 and try again"
        exit 1
    fi
}

function _usage() {
    echo "gh clone-org ORG [-p PATH]"
    echo "  ORG"
    echo "    Github organization."
    echo "  -o, --org ORG"
    echo "    Github organization."
    echo "  -p, --path PATH"
    echo "    Path to clone the repositories. Will be created if it does not exist."
    echo "    Default: current directory."
    echo "  --diasable-clone-protection"
    echo "    Disable the clone protection. This is useful when you have a hook that blocks the clone or post-checkout hooks."
    echo "    Default: false"
    echo "  -s, --server-host-ssh HOST"
    echo "    When are you using multiple accounts, with multiple SSH keys, you can use this option to specify the server host."
    echo "    Default: github.com"
    echo "  -h, --help"
    echo "    Display this message."
    echo ""
    echo "Limitations:"
    echo "  - Only works with organization"
    echo "  - Not be able to limit or filter the repositories to clone"
    echo ""
    echo "Examples:"
    echo "  gh clone-org github"
    echo "  gh clone-org github -p ~/github"
    echo "  gh clone-org github -s github.com-company"
}

function _check_organization() {
    if [ -z "${organization}" ]; then
        echo "Error: Organization is required"
        return 1
    fi

    if [ "$(gh api "users/${organization}" -q '.type' 2> /dev/null)" = "User" ]; then
        echo "Error: This extension only works with organizations"
        return 1
    fi
    
    if ! gh api -X GET "/orgs/${organization}" --silent 2> /dev/null; then
        echo "Error: Organization ${organization} does not exist"
        return 1
    fi
}

function _get_repository_ssh_url() {
    local organization=$1; shift
    local server_host_ssh=$1; shift
    
    local jq_query='.[].ssh_url'
    local query="orgs/${organization}/repos"
    
    repos_ssh_url=$(gh api --paginate "${query}" -q "${jq_query}")
    echo ${repos_ssh_url}
}

function _gh_clone_org() {
    local organization=$1; shift
    local server_host_ssh=$1; shift
    local default_gh_host=$1; shift
    local disable_clone_protection=$1; shift
    
    local has_to_change_host_ssh=false
    if [ "${server_host_ssh}" != "${default_gh_host}" ]; then
        has_to_change_host_ssh=true
    fi

    repositories=$(_get_repository_ssh_url "${organization}" "${server_host_ssh}")
    commands=""
    for url in ${repositories}; do
        repo_name=$(echo ${url} | awk -F'/' '{print $NF}' | sed 's/.git//')
        if ${has_to_change_host_ssh}; then
            url=${url/${default_gh_host}/${server_host_ssh}}
        fi
        cmd="echo \"Cloning ${repo_name}\""
        if ${disable_clone_protection}; then
            cmd="${cmd} && export GIT_CLONE_PROTECTION_ACTIVE=false"
        fi
        cmd="${cmd} && git clone --quiet ${url}"
        cmd="${cmd} ;"
        commands="${commands}${cmd}"        
    done
    echo ${commands} | xargs -P "$(nproc)" -d ';' -n 1 sh -c
}

_require gh

default_gh_host="github.com"
server_host_ssh="github.com"
disable_clone_protection=false

while [ "$1" != "" ]; do
    case $1 in
    -o | --org)
        shift
        organization="$1"
        ;;
    -p | --path)
        shift
        path_to_clone="$1"
        ;;
    --disable-clone-protection)
        shift
        disable_clone_protection=true
        ;;
    -s | --server-host-ssh)
        shift
        server_host_ssh="$1"
        ;;
    -h | --help)
        _usage
        exit
        ;;
    *)
        organization="$1"
        ;;
    esac
    shift
done

_check_organization || exit 1

[ -z "${path_to_clone}" ] && path_to_clone=$(pwd)
[ -d "${path_to_clone}" ] || mkdir -p "${path_to_clone}"


cd "${path_to_clone}" || exit 1


_gh_clone_org "${organization}" "${server_host_ssh}" "${default_gh_host}"
