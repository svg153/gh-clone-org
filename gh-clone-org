#!/bin/bash

function _require() {
    if [[ -z $(command -v "$1" 2>/dev/null) ]]; then
        echo "Install $1 and try again"
        exit 1
    fi
}

function _usage() {
    echo "gh clone-org ORG [-p PATH]"
    echo "  ORG"
    echo "    Github organization."
    echo "  -o, --org ORG"
    echo "    Github organization."
    echo "  -p, --path PATH"
    echo "    Clone path. Default: current directory."
    echo "  -h, --help"
    echo "    Display this message."
    echo ""
    echo "Limitations:"
    echo "  - Only works with organization"
    echo ""
    echo "Examples:"
    echo "  gh clone-org github"
    echo "  gh clone-org github -p ~/github"
}

function _check_organization() {
    if [ -z "${organization}" ]; then
        echo "Error: Organization is required"
        return 1
    fi

    if [ "$(gh api "users/${organization}" -q '.type' 2> /dev/null)" = "User" ]; then
        echo "Error: This extension only works with organizations"
        return 1
    fi
    
    if ! gh api -X GET "/orgs/${organization}" --silent 2> /dev/null; then
        echo "Error: Organization ${organization} does not exist"
        return 1
    fi
}

function _gh_clone_org() {
    local organization=$1

    repositories=$(gh api -X GET /orgs/${organization}/repos)
    for repo in $(echo "${repositories}" | jq -r '.[].name'); do
        url=$(echo "${repositories}" | jq -r ".[] | select(.name == \"${repo}\") | .ssh_url")
        commands="$commands echo \"Cloning ${repo}\" && git clone --quiet ${url};"
    done
    echo ${commands} | xargs -P "$(nproc)" -d ';' -n 1 sh -c
}

_require gh

while [ "$1" != "" ]; do
    case $1 in
    -o | --org)
        shift
        organization="$1"
        ;;
    -p | --path)
        shift
        path_to_clone="$1"
        ;;
    -h | --help)
        usage
        exit
        ;;
    *)
        organization="$1"
        ;;
    esac
    shift
done

_check_organization || exit 1

[ -z "${path_to_clone}" ] && path_to_clone=$(pwd)


cd "${path_to_clone}" || exit 1

_gh_clone_org "${organization}"
